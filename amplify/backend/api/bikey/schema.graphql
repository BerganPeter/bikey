type Bike
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete bikes
      { allow: groups, groups: ["Admin"] ,operations: [create,read,update]}
      # allow all authenticated users to view bikes
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view bikes
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  image: String
  brand: String
  featured: Boolean
  price: Float
  orders: [BikeOrder] @connection(keyName: "byBike", fields: ["id"])
}

type BikeOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byBike", fields: ["bike_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "bike_id"])
  @auth(
    rules: [
      # allow admins to create bike orders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  bike_id: ID!
  order_id: ID!
  bike: Bike @connection(fields: ["bike_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  bikes: [BikeOrder] @connection(keyName: "byOrder", fields: ["id"])
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}


enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  name: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}


